{"version":3,"sources":["components/Navbar.tsx","components/TodoForm.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","className","href","TodoForm","addHandler","React","useState","title","setTitle","onChange","event","target","value","onKeyPress","key","placeholder","type","TodoList","todos","toggleHandler","removeHandler","length","map","todo","completed","id","checked","onClick","App","setTodos","useEffect","localStorageTodos","JSON","parse","localStorage","getItem","setItem","stringify","Fragment","trim","newTodo","Date","now","prevState","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAEaA,EAAmB,kBAC9B,qBAAKC,UAAU,sBAAf,SACE,qBAAKA,UAAU,wBAAf,SACE,mBAAGC,KAAK,IAAID,UAAU,aAAtB,iDCCOE,EAAoC,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACzCC,IAAMC,SAAiB,IADkB,mBAC5DC,EAD4D,KACrDC,EADqD,KAcnE,OACE,qBAAKP,UAAU,qBAAf,SACE,uBACEQ,SAdgB,SAACC,GACrBF,EAASE,EAAMC,OAAOC,QAclBC,WAXoB,SAACH,GACP,UAAdA,EAAMI,MACRV,EAAWG,GACXC,EAAS,MASPI,MAAOL,EACPQ,YAAY,mBACZC,KAAK,YClBAC,EAAoC,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,cAExE,OAAqB,IAAjBF,EAAMG,OACD,mBAAGpB,UAAU,SAAb,4BAIP,oCACIiB,QADJ,IACIA,OADJ,EACIA,EAAOI,KAAI,SAAAC,GACX,OACE,oBACEtB,UAAWsB,EAAKC,UAAY,iBAAmB,OADjD,SAIE,kCACE,uBACER,KAAK,WACLP,SAAU,kBAAMU,EAAcI,EAAKE,KACnCC,QAASH,EAAKC,YAEhB,+BAAOD,EAAKhB,QACZ,mBACEoB,QAAS,kBAAMP,EAAcG,EAAKE,KAClCxB,UAAU,0BAFZ,wBATGsB,EAAKE,UC0CPG,EAzDO,WAAO,IAAD,EAEAtB,mBAAkB,IAFlB,mBAEnBY,EAFmB,KAEZW,EAFY,KAI1BC,qBAAU,WACR,IAAMC,EAAoBC,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,MACtEN,EAASE,KACR,IAEHD,qBAAU,WACRI,aAAaE,QAAQ,QAASJ,KAAKK,UAAUnB,MAC5C,CAACA,IA+BJ,OACE,eAAC,IAAMoB,SAAP,WACE,cAAC,EAAD,IACA,sBAAKrC,UAAU,oBAAf,UACE,cAAC,EAAD,CAAUG,WAhCG,SAACG,GAElB,GAAqB,KAAjBA,EAAMgC,OAAV,CAEA,IAAMC,EAAiB,CACrBjC,MAAOA,EACPkB,GAAIgB,KAAKC,MACTlB,WAAW,GAGbK,EAAS,CAACW,GAAF,mBAActB,SAuBlB,cAAC,EAAD,CACEA,MAAOA,EACPC,cArBc,SAACM,GACrBI,EAASX,EAAMI,KAAI,SAAAC,GAIjB,OAHIA,EAAKE,KAAOA,IACdF,EAAKC,WAAaD,EAAKC,WAElBD,OAiBHH,cAZc,SAACK,GACrBI,GAAS,SAAAc,GAAS,OAAIA,EAAUC,QAAO,SAAArB,GAAI,OAAIA,EAAKE,KAAOA,kBC/BhDoB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.44796843.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Navbar: React.FC = () => (\r\n  <nav className=\"light-blue accent-4\">\r\n    <div className=\"nav-wrapper container\">\r\n      <a href=\"/\" className=\"brand-logo\">\r\n        Todo List (React + TypeScript)\r\n      </a>\r\n    </div>\r\n  </nav>\r\n);","import React from \"react\";\r\n\r\ninterface TodoFormProps {\r\n  addHandler(title: string): void\r\n}\r\n\r\nexport const TodoForm: React.FC<TodoFormProps> = ({ addHandler }) => {\r\n  const [title, setTitle] = React.useState<string>(\"\");\r\n\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(event.target.value);\r\n  }\r\n  \r\n  const onKeyPressHandler = (event: React.KeyboardEvent) => {\r\n    if (event.key === \"Enter\") {\r\n      addHandler(title);\r\n      setTitle(\"\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"input-field col s6\">\r\n      <input \r\n        onChange={changeHandler}\r\n        onKeyPress={onKeyPressHandler}\r\n        value={title}\r\n        placeholder=\"Enter Todo Title\"\r\n        type=\"text\" \r\n      />\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport { ITodo } from '../interfaces'\r\n\r\ninterface TodoListProps {\r\n  todos: ITodo[],\r\n  toggleHandler: (id: number) => void,\r\n  removeHandler: (id: number) => void\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListProps> = ({ todos, toggleHandler, removeHandler }) => {\r\n  \r\n  if (todos.length === 0) {\r\n    return <p className=\"center\">No active todo</p>\r\n  }\r\n  \r\n  return (\r\n    <ul>\r\n      { todos?.map(todo => {\r\n        return (\r\n          <li \r\n            className={todo.completed ? \"todo completed\" : \"todo\"} \r\n            key={todo.id}\r\n          >\r\n            <label>\r\n              <input \r\n                type=\"checkbox\"\r\n                onChange={() => toggleHandler(todo.id)}\r\n                checked={todo.completed} \r\n              />\r\n              <span>{todo.title}</span>\r\n              <i\r\n                onClick={() => removeHandler(todo.id)}  \r\n                className=\"material-icons red-text\"\r\n              >\r\n                delete\r\n              </i>\r\n            </label>\r\n          </li>\r\n        )\r\n      }) }\r\n    </ul>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport { Navbar } from \"./components/Navbar\";\nimport { TodoForm } from \"./components/TodoForm\";\nimport { TodoList } from \"./components/TodoList\";\nimport { ITodo } from \"./interfaces\";\n\nconst App: React.FC = () => {\n\n  const [todos, setTodos] = useState<ITodo[]>([]);\n\n  useEffect(() => {\n    const localStorageTodos = JSON.parse(localStorage.getItem(\"todos\") || \"[]\");\n    setTodos(localStorageTodos);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos])\n\n  // Add Todo Item in Todo Array\n  const addHandler = (title: string) => {\n\n    if (title.trim() === \"\") return;\n    \n    const newTodo: ITodo = {\n      title: title,\n      id: Date.now(),\n      completed: false\n    }\n\n    setTodos([newTodo, ...todos]);\n  }\n\n  // Change Todo Completed\n  const toggleHandler = (id: number) => {\n    setTodos(todos.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo\n    }))\n  }\n\n  // Remove Todo Item in Todos array\n  const removeHandler = (id: number) => {\n    setTodos(prevState => prevState.filter(todo => todo.id !== id));\n  }\n\n  return (\n    <React.Fragment>\n      <Navbar />\n      <div className=\"wrapper container\">\n        <TodoForm addHandler={addHandler} />\n        <TodoList \n          todos={todos}\n          toggleHandler={toggleHandler}\n          removeHandler={removeHandler}\n        />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}